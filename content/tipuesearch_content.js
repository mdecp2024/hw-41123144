var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:  fqpabi8 \xa0 \n 個人倉儲: https://github.com/mdecp2024/hw-41123144 \n 個人網站: https://mdecp2024.github.io/hw-41123144/content/codespace.html \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'Open', 'text': '', 'tags': '', 'url': 'Open.html'}, {'title': 'codespace', 'text': '開啟動態 \n 1 pip install flask flask_cors beautifulsoup4 lxml pelican markdown gevent \n 2\xa0 python main.py \n 進行改版 \n 1 git add . \n 2\xa0 git commit -m "新增的的內容" \n 3\xa0 git push \n', 'tags': '', 'url': 'codespace.html'}, {'title': 'Jupyter', 'text': '1 開啟start_ipv6.bat \n 2\xa0 cd notebook \n 3\xa0 jupyter lab --collaborative \n', 'tags': '', 'url': 'Jupyter.html'}, {'title': 'coppeliaSim', 'text': '', 'tags': '', 'url': 'coppeliaSim.html'}, {'title': 'Environment', 'text': "n = 5  # 總共的行數\n \nfor i in range(n):  # 對於每一行\n    # 印出空格\n    print(' ' * (n - i - 1), end='')  # 在每行前面印出空格\n    # 印出星號\n    print('*' * (2 * i + 1))  # 每行印出 2*i + 1 個星號 \n 輸出結果 \xa0 \xa0 * \xa0 \xa0*** \xa0 ***** \xa0******* ********* \n", 'tags': '', 'url': 'Environment.html'}, {'title': '解釋：', 'text': "\n for i in range(n):  循環會運行  n  次， i  表示當前行的索引。 \n print(' ' * (n - i - 1), end='')  控制每一行的前導空格數量。對於第  i  行，會打印  n - i - 1  個空格，讓星號居中。 \n print('*' * (2 * i + 1))  每一行打印  2 * i + 1  個星號，這使得星號的數量隨行數增長。 \n \n 這樣就能形成一個等腰三角形。如果你改變  n  的值，三角形的高度也會隨之改變。 \n", 'tags': '', 'url': '解釋：.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '題目一 \n \n 題目二 \n \n 題目三 \n \n 心得: 5種執行環境的操作方式都不難,但是都需要經過查詢資料才能找出問題,我個人是只會brython,SciTE 其他三項都不會 但來世需要自主學習才能找出問題給出答案 \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '\n w11-1 \n def draw_circle(size=10, radius=4, fill_char="*", empty_char=" "):\n    """\n    在 size x size 的字元區域內，繪製一個半徑為 radius 的圓形。\n    :param size: 區域的邊長（正方形）\n    :param radius: 圓的半徑\n    :param fill_char: 用於填充圓形的字元\n    :param empty_char: 用於填充空白的字元\n    """\n    # 圓心位置\n    center_x, center_y = size // 2, size // 2\n    \n    # 遍歷每個點\n    for y in range(size):\n        for x in range(size):\n            # 計算與圓心的距離平方\n            distance_squared = (x - center_x) ** 2 + (y - center_y) ** 2\n            # 如果距離平方小於等於半徑平方，填充圓形\n            if distance_squared <= radius ** 2:\n                print(fill_char, end="")\n            else:\n                print(empty_char, end="")\n        print()  # 換行\n\n# 呼叫函式繪製圓形\ndraw_circle()  \n w11-2 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 40  # 每格的大小為 40 像素\n\nctx = canvas.getContext("2d")\n\n# 繪製網格\ndef dRect(lux, luy, w, h, s=1, c=\'#ff0000\'):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath()\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke()\n\ndef grid(width, height, grid_pix):\n    # x 方向共 width 格\n    # y 方向共 height 格\n    # grid_pix, 每一個的 pixel 點數\n    for i in range(width):\n        for j in range(height):\n            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")\n\n# 填滿格子\ndef fill(x, y, color):\n    ctx.fillStyle = color\n    ctx.fillRect((x - 1) * gs, (y - 1) * gs, gs, gs)\n\n# 繪製圓形區域\ndef draw_circle(grid_width, grid_height, radius):\n    # 圓心的格子座標（以 1 為基底）\n    center_x = grid_width // 2 + 1\n    center_y = grid_height // 2 + 1\n    \n    # 遍歷每個格子\n    for i in range(1, grid_width + 1):\n        for j in range(1, grid_height + 1):\n            # 計算格子的中心點到圓心的距離平方\n            distance_squared = (i - center_x) ** 2 + (j - center_y) ** 2\n            if distance_squared <= radius ** 2:\n                fill(i, j, "black")\n\n# 畫出網格和圓形\ngrid(10, 10, gs)\ndraw_circle(10, 10, radius=4) \n 心得:使用既有的程式來詢問AI該如何解答,若問一次得不出我想要的答案就繼續問,直到問出正確答案或學會該如何正確的與AI對話 \n w12-1 \n n = 11 # 總共的行數\nspace = \'_\'\ncenter = n//2\n#print(center)\n\nfor y in range(n):\n    for x in range(n):\n        print("(", x, ", ", y, ")", sep="") \n w12-2 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]  # 確保這個 ID 是正確的\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20\n\n# canvas 的繪圖上下文\nctx = canvas.getContext("2d")\nif ctx is None:\n    print("無法獲取 canvas 的繪圖上下文，請檢查瀏覽器支援及程式碼")\nelse:\n    width = 11\n    height = 11\n\n    # 保留第 35 行的程式邏輯\n    \'\'\'\n    ctx.lineWidth = 1\n    ctx.strokeStyle = \'lightgrey\'\n    ctx.beginPath()\n    # ctx.rect(i*gs, j*gs, gs, gs)  # 註解掉的部分\n    ctx.rect(0, 0, 150, 100)\n    ctx.stroke()\n    \'\'\'\n\n    for i in range(width):\n        for j in range(height):\n            # 保留 35 行的結構，但加上有效的註解符號\n            # dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")  # 這裡如果未實現，應保留註解形式\n            ctx.lineWidth = 1\n            ctx.strokeStyle = \'lightgrey\'\n            ctx.beginPath()\n            ctx.rect(i * gs, j * gs, gs, gs)\n            ctx.stroke()', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': 'Brython \n 01_string \n 02_variables \n 03_list \n 04_list \n 05_list \n 06_list \n 07_list \n 08_for \n 09_for \n 10_for \n 心得:在可攜檔案的 notebook 裡的筆記本程式01-10,是由 strings 、i nput 、 for 來儲存或呼叫程式,再用print \n 來印出雙引號內的文字、表情 、圖案', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13', 'text': 'w13題目 \n 心得:再詢問 AI 的過程中需要由自己來引導他給出我們想要的答案,如果是直接把整個題目或原始程式傳給他,叫他直接給我們一個答案,有極大的概率不僅得不出答案,反而會有如for迴圈一般陷入無限問答的窘境', 'tags': '', 'url': 'w13.html'}, {'title': 'w13_ai', 'text': '黑色畫筆畫外接圓 \n', 'tags': '', 'url': 'w13_ai.html'}, {'title': 'w13_hw', 'text': '在各區塊上色 \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '三圓 \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w15', 'text': '從 1 累加到 100 \n addto \n add_only_even \n add_avoid_8 \n 心得:這4個程式的題目皆是在將數字進行累加計算來得出結果,且在部分程式內會出現不計算任何含有某個數字的數字來進行累加,結果可以非常多變', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': 'exam1 \n from browser import html\nfrom browser import document as doc\n\n# 建立 Canvas 並加入網頁\ncanvas = html.CANVAS(width=500, height=500)\ndoc["brython_div1"] <= canvas\nctx = canvas.getContext("2d")\n\n# 原點座標\norigin_x, origin_y = 31, 44\n\n# 繪製坐標軸與原點標示\nctx.beginPath()\nctx.strokeStyle, ctx.lineWidth = \'black\', 2\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(400, origin_y)  # X 軸\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(origin_x, 400)  # Y 軸\nctx.stroke()\n\nctx.font, ctx.fillStyle = "12px Arial", "black"\nctx.fillText(f"({origin_x}, {origin_y})", origin_x + 4, origin_y + 13)\n\n# 定義圖形繪製的屬性\nshapes = [\n    {"type": "polygon", "color": "orange", "points": [\n        (50, 50), (70, 20), (100, 20), (120, 50), (100, 80), (70, 80)]},\n    {"type": "polygon", "color": "teal", "points": [\n        (130, 50), (150, 15), (170, 50), (150, 85)]},\n    {"type": "polygon", "color": "skyblue", "points": [\n        (155, 85), (175, 50), (195, 85)]},\n    {"type": "circle", "color": "red", "center": (215, 50), "radius": 27},\n    {"type": "rect", "color": "gold", "position": (250, 25), "size": (50, 50)},\n    {"type": "rect", "color": "navy", "position": (310, 40), "size": (60, 25)}\n]\n\n# 繪製圖形\nfor shape in shapes:\n    ctx.beginPath()\n    ctx.fillStyle = shape["color"]\n\n    if shape["type"] == "polygon":\n        points = shape["points"]\n        ctx.moveTo(origin_x + points[0][0], origin_y + points[0][1])\n        for x, y in points[1:]:\n            ctx.lineTo(origin_x + x, origin_y + y)\n        ctx.closePath()\n        ctx.fill()\n\n    elif shape["type"] == "circle":\n        center, radius = shape["center"], shape["radius"]\n        ctx.arc(origin_x + center[0], origin_y + center[1], radius, 0, 2 * 3.14159)\n        ctx.fill()\n\n    elif shape["type"] == "rect":\n        pos, size = shape["position"], shape["size"]\n        ctx.rect(origin_x + pos[0], origin_y + pos[1], size[0], size[1])\n        ctx.fill() \n 心得 \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w16_exam2', 'text': 'exam2 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)  # 設定迷宮畫布大小\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 取得 canvas 的繪圖上下文\nctx = canvas.getContext("2d")\n\n# 標示左上方點座標 (31, 44)\nctx.font = "12px Arial"\nctx.fillStyle = "red"\nctx.fillText("(31, 44)", 33, 58)\n\n# 定義藍色線條的屬性\nctx.strokeStyle = "blue"\nctx.lineWidth = 2\n\n# 座標偏移 (31, 44) 為起點\noffset_x, offset_y = 31, 44\n\n# 定義迷宮的線條 (每條線由起點和終點定義)\nlines = [\n    ((0, 0), (80, 0)),   # 上方水平線\n    ((120, 0), (200, 0)),  # 上方右段水平線\n    ((200, 0), (200, 200)),  # 右側垂直線\n    ((0, 0), (0, 200)),  # 左側垂直線\n    ((0, 200), (80, 200)),  # 下方左段水平線\n    ((120, 200), (200, 200)),  # 下方右段水平線\n    ((80, 160), (80, 200)),  # 左側中段垂直線\n    ((80, 160), (120, 160)),  # 中間橫線\n    ((160, 120), (160, 200)),  # 右側中段垂直線\n    ((40, 120), (160, 120)),  # 中段水平線\n    ((40, 120), (40, 160)),  # 左中垂直線\n    ((120, 80), (120, 120)),  # 中間右段垂直線\n    ((0, 80), (80, 80)),  # 左上水平線\n    ((80, 40), (80, 80)),  # 左中垂直線\n    ((40, 40), (160, 40)),  # 上中水平線\n    ((160, 40), (160, 80))  # 右中垂直線\n]\n\n# 繪製迷宮線條\nctx.beginPath()\nfor (start, end) in lines:\n    ctx.moveTo(offset_x + start[0], offset_y + start[1])\n    ctx.lineTo(offset_x + end[0], offset_y + end[1])\nctx.stroke() \n 心得', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'w16_exam3', 'text': 'exam3 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)  # 設定迷宮畫布大小\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 取得 canvas 的繪圖上下文\nctx = canvas.getContext("2d")\n\n# 標示左上方點座標 (31, 44)\nctx.font = "12px Arial"\nctx.fillStyle = "red"\nctx.fillText("(31, 44)", 33, 58)\n\n# 定義繪圖的偏移量\noffset_x, offset_y = 31, 44\n\n# 定義迷宮線條 (黑色) 和路徑線條 (紅色)\nlines = {\n    "black": [\n        ((0, 0), (80, 0)), ((120, 0), (200, 0)), ((200, 0), (200, 200)),\n        ((0, 0), (0, 200)), ((0, 200), (80, 200)), ((120, 200), (200, 200)),\n        ((80, 160), (80, 200)), ((80, 160), (120, 160)), ((160, 120), (160, 200)),\n        ((40, 120), (160, 120)), ((40, 120), (40, 160)), ((120, 80), (120, 120)),\n        ((0, 80), (80, 80)), ((80, 40), (80, 80)), ((40, 40), (160, 40)),\n        ((160, 40), (160, 80))\n    ],\n    "red": [\n        ((100, 0), (100, 20)), ((100, 20), (180, 20)), ((180, 20), (180, 100)),\n        ((180, 100), (140, 100)), ((140, 100), (140, 60)), ((140, 60), (100, 60)),\n        ((100, 60), (100, 100)), ((100, 100), (20, 100)), ((20, 100), (20, 180)),\n        ((20, 180), (60, 180)), ((60, 180), (60, 140)), ((60, 140), (140, 140)),\n        ((140, 140), (140, 180)), ((140, 180), (100, 180)), ((100, 180), (100, 200))\n    ]\n}\n\n# 繪製線條的函數\ndef draw_lines(color, line_data):\n    ctx.strokeStyle = color\n    ctx.lineWidth = 2\n    ctx.beginPath()\n    for start, end in line_data:\n        ctx.moveTo(offset_x + start[0], offset_y + start[1])\n        ctx.lineTo(offset_x + end[0], offset_y + end[1])\n    ctx.stroke()\n\n# 繪製迷宮線條 (黑色)\ndraw_lines("black", lines["black"])\n\n# 繪製路徑線條 (紅色)\ndraw_lines("red", lines["red"]) \n \n 心得', 'tags': '', 'url': 'w16_exam3.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};